1.了解了理论基础后，小明选用了Dapper的一个开源实现Zipkin。然后手指一抖，写了个HTTP请求的拦截器，在每次HTTP请求时生成这些数据注入到HEADERS，同时异步发送调用日志到Zipkin的日志收集器中
2.网关 - 权限控制，服务治理。折中的方案是按照业务领域将微服务分成几个区，区内直接调用，区间通过网关调用。
3.服务注册与发现 - 动态扩容
4.熔断、服务降级、限流。
熔断
当一个服务因为各种原因停止响应时，调用方通常会等待一段时间，然后超时或者收到错误返回。（例如在调用函数里加入超时时间和重试次数的参数，重试失败就返回）
服务降级
当下游服务停止工作后，如果该服务并非核心业务，则上游服务应该降级，以保证核心业务不中断。比如网上超市下单界面有一个推荐商品凑单的功能，当推荐模块挂了后，下单功能不能一起挂掉，只需要暂时关闭推荐功能即可。
限流
一个服务挂掉后，上游服务或者用户一般会习惯性地重试访问。这导致一旦服务恢复正常，很可能因为瞬间网络流量过大又立刻挂掉，在棺材里重复着仰卧起坐。
测试
微服务架构下，测试分为三个层次：

端到端测试：覆盖整个系统，一般在用户界面机型测试。
服务测试：针对服务接口进行测试。Mock Server
单元测试：针对代码单元进行测试。

1.Tars
腾讯内部使用的微服务架构 TAF（Total Application Framework）多年的实践成果总结而成的开源项目。仅支持 C++ 语言，目前在腾讯内部应用也非常广泛。2017 年对外开源，仅支持 C++ 语言。

源码：https://github.com/TarsCloud/Tars/

2.Service Mesh是用于处理服务间通信的基础设施层，用于在云原生应用复杂的服务拓扑中实现可靠的请求传递。在实践中，Service Mesh通常是一组与应用一起部署，但对应用透明的轻量级网络代理。
Service Mesh会抽离微服务中的通用功能，比如服务注册发现，负载均衡，熔断降级，限流扩容，监控等功能，把这些功能放到sidercar中，通过代理的方式于业务服务进行通信，从而解决上面的问题。
